name: Windows

on: [push, pull_request]

jobs:
  build-win10:
    strategy:
      matrix:
        toolset: [x64, Win32]
        config: [Debug]
        include:
          - toolset: Win32
            cmake_generator: "Ninja"
          - toolset: x64
            cmake_generator: "Visual Studio 16 2019"

    runs-on: windows-2019
    name: Win10 -> ${{ matrix.toolset }}, ${{ matrix.config }}

    steps:
    - name: Clone DiligentTests
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Failure Test
      shell: bash
      run: |
        chmod +x ./pipe_error.sh
        EXIT_CODE=0
        "${{github.workspace}}/exit_with_error.sh" || EXIT_CODE=$?
        if [[ "EXIT_CODE" != "0" ]]; then
          echo "::warning:: Previous step failed!"
          echo "::error:: Previous step failed!"
          # exit 0
        fi

    - name: Setup Ninja
      if: ${{ matrix.cmake_generator == 'Ninja' }}
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Setup Developer Command Prompt for VS
      if: ${{ matrix.cmake_generator == 'Ninja' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.toolset }}

    - name: Configure CMake
      if: success()
      env:
        CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
        #CMAKE_GENERATOR_PLATFORM: ${{ matrix.toolset }}
      shell: bash
      run: |
        #cd $GITHUB_WORKSPACE/DiligentTests/BuildTools/Scripts/github_actions
        #./create_cmake.sh "$GITHUB_WORKSPACE"
        #cd $GITHUB_WORKSPACE/DiligentCore/BuildTools/Scripts/github_actions
        #./configure_cmake.sh "win" "${{runner.workspace}}" ${{ matrix.toolset }} ${{ matrix.config }}
        cd "${{runner.workspace}}"
        mkdir build
        cd ./build
        cmake "$GITHUB_WORKSPACE" -DCMAKE_BUILD_TYPE=${{runner.config}}

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.config }}

    - name: Tests
      if: success()
      shell: bash
      run: |
        #cd "${{runner.workspace}}\DiligentTests\Tests\DiligentToolsTest\assets"
        export BIN_DIR="${{runner.workspace}}\build\DiligentCoreTests"
        if [ "${{ matrix.cmake_generator }}" != "Ninja" ]; then BIN_DIR="$BIN_DIR\${{ matrix.config }}"; fi
        "$BIN_DIR\DiligentCore_Tests.exe"


  codespell-linux:
    strategy:
      matrix:
        toolset: [x64]
        config: [Debug]

    runs-on: ubuntu-latest
    name: Linux -> codespell

    steps:
    - name: Clone DiligentTests
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Clone DiligentEngine
      uses: actions/checkout@v2
      with:
        repository: 'DiligentGraphics/DiligentEngine'
        path:       DiligentEngine

    - uses: codespell-project/actions-codespell@master
      with:
        check_filenames: true
        ignore_words_list: lod
        #skip: ./DiligentSamples/ThirdParty,./DiligentSamples/Samples/Asteroids/SDK,*.gltf
        path: ./DiligentEngine


  code_ql:
    strategy:
      matrix:
        toolset: [x64]
        config: [Debug]

    runs-on: ubuntu-latest
    name: Code QL -> ${{ matrix.toolset }}, ${{ matrix.config }}

    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    steps:
    - name: Clone DiligentTests
      uses: actions/checkout@v2
      with:
        submodules: recursive

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
   
    - name: Configure CMake
      if: success()
      shell: bash
      run: |
        #cd $GITHUB_WORKSPACE/DiligentTests/BuildTools/Scripts/github_actions
        #./create_cmake.sh "$GITHUB_WORKSPACE"
        #cd $GITHUB_WORKSPACE/DiligentCore/BuildTools/Scripts/github_actions
        #./configure_cmake.sh "win" "${{runner.workspace}}" ${{ matrix.toolset }} ${{ matrix.config }}
        cd "${{runner.workspace}}"
        mkdir build
        cd ./build
        cmake "$GITHUB_WORKSPACE" -DCMAKE_BUILD_TYPE=${{runner.config}}

    - name: Build
      if: success()
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.config }}
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2